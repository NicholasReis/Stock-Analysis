

class Stock:
	#Creates a global dictionary
	yearlyData = dict()
	
	#Creates a global stock symbol variable
	stock_symbol = ""
	def __init__(self, stock_symbol):
		#Assigns the stock symbol to the variable
		self.stock_symbol = stock_symbol
		
		#Disabled until the data can be output properly
		#self.loadFromFile()
	
	#Function for loading the information into the stock from a file generated by the data grabber	
	def loadFromFile(self):
		#Creates an array to store each line
		lines =[]
		#Opens the file (Will be <stock_symbol>.txt)
		with open('temporaryData') as tempData:
			#Assigns the text of each line to the array (Does it need to be append?)
			lines =tempData.read().splitlines()
		#print(lines) #Just to assess for now

		#Creates a year variable to keep track of how many years of data we have
		year = 0
		#For each line in the lines array
		for line in lines:
			#If the line is not blank (The yearly delimiter)
			if(line != ""):
				#Assigns new array to hold the key:value pair split on the semicolon
				values = str(line).split(":")
				#print(values) #For assessment
				#If the key is "year"
				if(values[0] == "year"):
					#Assigns year to the year the data is from (ie 2018 or whatever)
					year = values[1]
					#Assigns a new dictionary to the current dictionary. yearlyData[<year>][<data from year>]
					self.yearlyData[year] = dict()
					#print(yearlyData)
				#If the key is not year
				else:
					#print(values) #For assessment
					#Assigns the data to the key of the current year thats being processed
					self.yearlyData[year][values[0]] = values[1]

		print(self.yearlyData["2020"]["net_income"]) #For assessment

	#Tool for StockAnalyzer to get the years it needs to process
	def getYears(self):
		#Creates empty array to keep track of the years
		trackedYears = []
		#This should be assigned by the OS, but for not its hard coded.
		currentYear = 2021
		#Gets the # of years
		years = len(self.yearlyData)
		#While more years exist
		while(years > 0):
			#Appends the current year subtracting the number of years to get the first year of data we have
			trackedYears.append(currentYear-(years))
			#Subtracts one year
			years -=1
		#Returns the array of years to be used as keys for the stock data
		return trackedYears

	#Using the keys given by getYears they can be sent here to get the Annual Revenue for that year
	#This will likey become getData and accept a label as another argument, I'm not sure why I did it this way
	#Though I suspect it's because of the way the data was separated by DataGrabber, but if I output it in a nice
	#Way that shouldn't end up mattering too much.
	def getAnnualRevenue(self, year):
		#Returns the annual revenue from the associated year
		return self.yearlyData[str(year)]["annual_revenue"]

		#Information I will want to keep track of. Will delete when I start implementing the Analyzer Class
		#pe
		#annual_revenue
		#profit_margin #(Net income / Total Revenue)
		#shares_issued
		#current_assets
		#current_liabilities
		#cash_flow
		#capital_expenditures
		#price #price to free cash flow < 15%
