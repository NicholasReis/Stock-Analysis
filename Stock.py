

class Stock:
	#Creates a global dictionary
	yearlyData = dict()
	
	#Creates a global stock symbol variable
	stock_symbol = ""
	def __init__(self, stock_symbol, years):
		#Assigns the stock symbol to the variable
		self.stock_symbol = stock_symbol
		self.loadFromFile(years)
	
	#Function for loading the information into the stock from a file generated by the data grabber	
	def loadFromFile(self, years):
		for year in years:
			#Creates an array to store each line
			lines =[]
			#Opens the file (Will be <stock_symbol>.txt)
			with open(self.stock_symbol+str(year)+".txt", "r") as tempData:
				#Assigns the text of each line to the array (Does it need to be append?)
				tempLines = tempData.readlines()
				for line in tempLines:
					lines.append(line)
			#For each line in the lines array
			data = dict()
			for line in lines:
				self.yearlyData[str(year)] = dict()
				#Assigns new array to hold the key:value pair split on the semicolon
				values = str(line).split(">")
				#print(values) #For assessment
				#If the key is "year"
				if(values[1] == "{}\n"):
					data[str(values[0])] = ""
				else:
					begin = str(values[1]).index(':') +1
					end = values[1].index(',')
					data[str(values[0])] = int(values[1][begin:end])
			
			self.yearlyData[str(year)] = data

	#Using the keys given by getYears they can be sent here to get the Annual Revenue for that year
	#This will likey become getData and accept a label as another argument, I'm not sure why I did it this way
	#Though I suspect it's because of the way the data was separated by DataGrabber, but if I output it in a nice
	#Way that shouldn't end up mattering too much.
	def getAnnualRevenue(self, year):
		#Returns the annual revenue from the associated year
		return self.yearlyData[str(year)]["annual_revenue"]

		#Information I will want to keep track of. Will delete when I start implementing the Analyzer Class
		#pe
		#annual_revenue
		#profit_margin #(Net income / Total Revenue)
		#shares_issued
		#current_assets
		#current_liabilities
		#cash_flow
		#capital_expenditures
		#price #price to free cash flow < 15%
